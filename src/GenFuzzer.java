import java.io.*;
import java.nio.file.Files;
import java.nio.file.NoSuchFileException;
import java.nio.file.Path;
import java.nio.file.Paths;

public class GenFuzzer {
    private static class Data implements Serializable{
        final short maigicNumber= (short) 0xABCD;
        short version = 100;
        String authorName;
        int width;
        int height;
        int colorNumber;
        int[] colorTable;
        Byte[] pixelsTable;

        public Data(short version,String authorName, int width, int height, int colorNumber, int[] colorTable, Byte[] pixelsTable) {
            this.version =version;
            this.authorName = authorName;
            this.width = width;
            this.height = height;
            this.colorNumber = colorNumber;
            this.colorTable = colorTable;
            this.pixelsTable = pixelsTable;
        }
    }

    public static void main(String [] args){
        /* Initialize data */
        /*short version = 100;
        String author = "Ramin";
        int w = 16;
        int h = 16;
        int nbColor=4;
        int[] tabColor= new int[]{0xff000000,0x00ff00ff,0x000000ff,0x00ff0000};
        Byte[]pixels = new Byte[w*h];
        for (int i = 0; i < w * h; i++)
            pixels[i]= (byte) Math.floor(Math.random()*4);

        Data d = new Data(version,author,w,h,nbColor,tabColor,pixels);*/
        byte[] dataOne = new byte[294];
        /* Magic Number */
        dataOne[0]=(byte)0xAB;
        dataOne[1]=(byte)0xCD;

        /* Version */
        dataOne[2]=(byte)0x00;
        dataOne[3]=(byte)0x64;

        /* Author name */
        dataOne[4]=(byte)0x52;
        dataOne[5]=(byte)0x61;
        dataOne[6]=(byte)0x6d;
        dataOne[7]=(byte)0x69;
        dataOne[8]=(byte)0x6e;
        dataOne[9]=(byte)0x00;

        /* Width */
        dataOne[10]=(byte)0x00;
        dataOne[11]=(byte)0x00;
        dataOne[12]=(byte)0x00;
        dataOne[13]=(byte)0x10;

        /* Height*/
        dataOne[14]=(byte)0x00;
        dataOne[15]=(byte)0x00;
        dataOne[16]=(byte)0x00;
        dataOne[18]=(byte)0x10;

        /* Number of colors*/
        dataOne[19]=(byte)0x00;
        dataOne[20]=(byte)0x00;
        dataOne[21]=(byte)0x00;
        dataOne[23]=(byte)0x04;

        /* Color 1 */
        dataOne[24]=(byte)0xff;
        dataOne[25]=(byte)0x00;
        dataOne[26]=(byte)0x00;
        dataOne[27]=(byte)0x00;

        /* Color 2 */
        dataOne[28]=(byte)0x00;
        dataOne[29]=(byte)0xff;
        dataOne[30]=(byte)0x00;
        dataOne[31]=(byte)0xff;

        /* Color 3 */
        dataOne[32]=(byte)0x00;
        dataOne[33]=(byte)0x00;
        dataOne[34]=(byte)0x00;
        dataOne[35]=(byte)0xff;

        /* Color 4 */
        dataOne[36]=(byte)0x00;
        dataOne[37]=(byte)0x00;
        dataOne[38]=(byte)0xff;
        dataOne[39]=(byte)0x00;

        for (int i = 40; i < dataOne.length; i++)
            dataOne[i]= (byte) Math.floor(Math.random()*4);

        Path inputFile = Paths.get("testinputgen.img");

        /* Write on the file the array of bytes */
        try {
            Files.write(inputFile, dataOne);
        } catch (IOException e) {
            e.printStackTrace();
        }

        /* Run the converter_static exe */
        String resultOfTheRun = run_process(inputFile);
        if (resultOfTheRun != null) {   // check if the result is not null
                /* If the program is not crashing we delete the file */
            if (!resultOfTheRun.equals("*** The program has crashed.")) {
                try {
                    Files.delete(inputFile);
                } catch (NoSuchFileException x) {
                    System.err.format("%s: no such" + " file or directory%n", inputFile);
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
    /**
     * Simply read the FIRST line of the result returned by the exec file.
     * @param inputFile the input file we give to the exec file.
     * @return the FIRST line of the result generated by the exec file.
     */
    private static String run_process(Path inputFile) {
        try {
            String line;
            Process p = Runtime.getRuntime().exec("./converter_static " + inputFile + " testoutput.img");
            BufferedReader bre = new BufferedReader(new InputStreamReader(p.getErrorStream()));
            if ((line = bre.readLine()) != null) {
                return line;
            }
            bre.close();
            p.waitFor();
        }
        catch (Exception err) {
            err.printStackTrace();
        }
        return null;
    }
}
